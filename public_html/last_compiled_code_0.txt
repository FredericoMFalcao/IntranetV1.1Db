     1	
     2	
     3	<?php $outerScopeCompleteFilePath = "./01_sql/00_build_support_funcs.sql"; ?>
     4	<?php
     5	// vim: syntax=php
     6	
     7	ini_set("display_errors", "stderr");
     8	ini_set("error_reporting", E_ALL);
     9	
    10	function tableNameWithModule(string $tblName = '') {
    11	  // Import variables from outer scope
    12	  global $outerScopeCompleteFilePath;
    13	  // Set default of no value was provided
    14	  if ($tblName == "") {
    15		if(!preg_match(";[0-9]{2}_([A-Za-z0-9_]+)\.sql$;", $outerScopeCompleteFilePath,$matches)) 
    16			die("INTERNAL ERROR! Could not figure out tableName from current file name. ($outerScopeCompleteFilePath)");
    17		$tblName = $matches[1]; 
    18	  }
    19	  // Extract module name
    20	  $moduleName = array_slice(explode("/", $outerScopeCompleteFilePath),-3,1)[0];
    21	  $moduleName = substr($moduleName, 3);
    22	
    23	  return strtoupper($moduleName)."_".$tblName;
    24	  
    25	}
    26	?>
    27	
    28	<?php $outerScopeCompleteFilePath = "./01_sql/01_sys/01_Files.sql"; ?>
    29	CREATE TABLE SYS_Files (
    30	  Id VARCHAR(255),
    31	  PRIMARY KEY (Id)  
    32	);
    33	
    34	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/01_tables/01_Contas.sql"; ?>
    35	-- Tabela: Contas
    36	-- Descrição: Lista todos os nomes e propriedades das contas contabilísticas da aplicação
    37	
    38	CREATE TABLE <?=tableNameWithModule()?> (
    39	  Conta VARCHAR(20) NOT NULL, -- Dois primeiros digitos reflectem o tipo de conta
    40	  Nome VARCHAR(255) NOT NULL,
    41	  Extra JSON,
    42	  PRIMARY KEY (Conta)
    43	);
    44	
    45	
    46	-- - Dados Iniciais -- -
    47	INSERT INTO Contas (Conta, Nome) VALUES ('CR0101',"Teste01"); -- centro de resultados
    48	INSERT INTO Contas (Conta, Nome) VALUES ('AN0202',"Teste02"); -- analítica
    49	INSERT INTO Contas (Conta, Nome) VALUES ('FO32121000',"Teste03"); -- fornecedor
    50	INSERT INTO Contas (Conta, Nome) VALUES ('COabc',"Teste04"); -- colaborador
    51	INSERT INTO Contas (Conta, Nome) VALUES ('CG01',"FaturasFornecedor"); -- custos gerais
    52	
    53	-- vim: syntax=sql
    54	
    55	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/01_tables/02_DocTipos.sql"; ?>
    56	-- Tabela: DocTipos
    57	-- Descricao: Lista todos os tipos de documento e respectivos schemas
    58	
    59	CREATE TABLE DocTipos (  
    60	  Tipo VARCHAR(50) NOT NULL,
    61	  DocSchema JSON,
    62	  
    63	  PRIMARY KEY (Tipo)
    64	);
    65	
    66	-- Dados Iniciais
    67	INSERT INTO DocTipos (Tipo) VALUES ('FaturaFornecedor');
    68	
    69	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/01_tables/03_DocEstados.sql"; ?>
    70	-- Tabela: DocEstados
    71	-- Descricao: Lista todos os estados que cada tipo de documento pode ter
    72	
    73	CREATE TABLE DocEstados (  
    74	  TipoDoc VARCHAR(50) NOT NULL,
    75	  Estado VARCHAR(50) NOT NULL,
    76	  Descricao VARCHAR(255),
    77	  
    78	  PRIMARY KEY (TipoDoc,Estado),
    79	  FOREIGN KEY (TipoDoc) REFERENCES DocTipos(Tipo) ON DELETE RESTRICT ON UPDATE CASCADE
    80	);
    81	
    82	
    83	-- Dados Iniciais
    84	INSERT INTO DocEstados (TipoDoc, Estado, Descricao) VALUES ('FaturaFornecedor', 'PorClassificarFornecedor', 'Existe no sistema apenas com um PDF.');
    85	INSERT INTO DocEstados (TipoDoc, Estado, Descricao) VALUES ('FaturaFornecedor', 'PorClassificarAnalitica',  'À espera de ser classificada em termos de contabilidade analítica.');
    86	INSERT INTO DocEstados (TipoDoc, Estado, Descricao) VALUES ('FaturaFornecedor', 'PorAnexarCPagamento',     'À espera de ser anexado comprovativo de pagamento.');
    87	INSERT INTO DocEstados (TipoDoc, Estado, Descricao) VALUES ('FaturaFornecedor', 'PorRegistarContabilidade', 'À espera de integrar custo no software de contabilidade fiscal.');
    88	INSERT INTO DocEstados (TipoDoc, Estado, Descricao) VALUES ('FaturaFornecedor', 'PorRegistarPagamentoContab', 'À espera de integrar pagamento no software de contabilidade fiscal.');
    89	INSERT INTO DocEstados (TipoDoc, Estado, Descricao) VALUES ('FaturaFornecedor', 'Concluido', 'Todos os procedimentos foram realizados.');
    90	
    91	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/01_tables/21_Documentos.sql"; ?>
    92	-- Tabela: Documentos
    93	-- Descricao: Lista todos os códigos e propriedades dos documentos inseridos na aplicação
    94	
    95	CREATE TABLE Documentos (
    96	  NumSerie VARCHAR(25),
    97	  
    98	  Tipo VARCHAR(50) NOT NULL, -- foreign key
    99	  Estado VARCHAR(50) NOT NULL, -- foreign key
   100	  
   101	  FileId VARCHAR(255),
   102	  Extra JSON,
   103	  
   104	  FOREIGN KEY (FileId) REFERENCES SYS_Files(Id),
   105	  UNIQUE (NumSerie),
   106	  FOREIGN KEY (Tipo,Estado) REFERENCES DocEstados(TipoDoc,Estado) ON DELETE RESTRICT ON UPDATE CASCADE
   107	);
   108	
   109	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/01_tables/40_DocWorkflow.sql"; ?>
   110	-- Tabela: DocWorkflow
   111	-- Descricao: Regista todas as alterações feitas a documentos
   112	
   113	CREATE TABLE DocWorkflow (
   114	  NumSerie VARCHAR(25) NOT NULL, -- foreign key
   115	  TipoDoc VARCHAR(50) NOT NULL, -- foreign key
   116	  Descricao VARCHAR(250) NOT NULL,
   117	  Utilizador VARCHAR(20) NOT NULL, -- foreign key
   118	  DataHora DATETIME NOT NULL,
   119	  DocInfoAntes JSON NOT NULL,
   120	  DocInfoDepois JSON NOT NULL,
   121	
   122	  FOREIGN KEY (NumSerie) REFERENCES Documentos(NumSerie) ON DELETE CASCADE ON UPDATE CASCADE,
   123	  FOREIGN KEY (TipoDoc) REFERENCES DocTipos(Tipo) ON DELETE RESTRICT ON UPDATE CASCADE
   124	--  FOREIGN KEY (Utilizador) REFERENCES Utilizadores(Utilizador) ON DELETE RESTRICT ON UPDATE CASCADE
   125	);
   126	
   127	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/01_tables/41_Lancamentos.sql"; ?>
   128	-- Tabela: Lancamentos
   129	-- Descricao: Regista todos os lançamentos contabilísticos da empresa
   130	
   131	CREATE TABLE Lancamentos (
   132	  Conta        VARCHAR(30) NOT NULL, -- pode ser conta composta (e.g. '0101:020403:ABC' para Centro Resultados, Analítica e Colaborador)
   133	  CoefRateio   FLOAT NOT NULL,       -- percentagem do valor total do respectivo documento (pode variar entre -1 e 1)
   134	  Mes          DATE NOT NULL,        -- primeiro dia do mês a que o valor diz respeito
   135	  DocNumSerie  VARCHAR(25) NOT NULL, -- foreign key
   136	  
   137	  PRIMARY KEY (Conta,CoefRateio,Mes,DocNumSerie),
   138	  FOREIGN KEY (DocNumSerie) REFERENCES <?=tableNameWithModule("Documentos")?> (NumSerie) ON DELETE CASCADE ON UPDATE CASCADE
   139	);
   140	
   141	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/01_tables/50_VirtualTables.sql"; ?>
   142	-- Virtual Tables
   143	-- Description: (1) this table will list all the REST available endpoints
   144	--                    - that are technically virtual tables (a combination of stored procedures for input / views for output)
   145	--              (2) allows client/browser to query data with "metadata"
   146	--                    - metadata helps the browser to know how to auto-build create/edit forms and parse text data into images, icons, etc... 
   147	CREATE TABLE PLT_VirtualTables (
   148	  Name VARCHAR(255) NOT NULL,
   149	  PrimaryKey JSON,
   150	  PRIMARY KEY (Name)
   151	   
   152	);
   153	
   154	CREATE TABLE PLT_VirtualTablesFields (
   155	  ParentTable VARCHAR(255), -- foreign key
   156	  Name VARCHAR(255) NOT NULL,
   157	  Type VARCHAR(25) NOT NULL,
   158	  Options JSON,
   159	  FOREIGN KEY (ParentTable) REFERENCES PLT_VirtualTables(Name) ON UPDATE CASCADE ON DELETE CASCADE
   160	);
   161	
   162	
   163	-- -- INITIAL DATA ----
   164	INSERT INTO PLT_VirtualTables (Name, PrimaryKey) VALUES ('PorClassificarFornecedor','["NumSerie"]');
   165	INSERT INTO PLT_VirtualTablesFields (ParentTable, Name, Type) VALUES ('PorClassificarFornecedor','NumSerie','TEXT');
   166	
   167	INSERT INTO PLT_VirtualTables (Name, PrimaryKey) VALUES ('PorClassificarAnalitica','["NumSerie"]');
   168	INSERT INTO PLT_VirtualTablesFields (ParentTable, Name, Type) VALUES ('PorClassificarAnalitica',"NumSerie",'TEXT');
   169	
   170	INSERT INTO PLT_VirtualTables (Name, PrimaryKey) VALUES ('Contas','["Conta","Tipo"]');
   171	INSERT INTO PLT_VirtualTablesFields (ParentTable, Name, Type) VALUES 
   172	  ('Contas',"Conta",'TEXT'),
   173	  ('Contas',"Nome",'TEXT'),
   174	  ('Contas',"Tipo",'TEXT');
   175	
   176	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/01_tables/51_API.sql"; ?>
   177	-- API
   178	-- Description: Lists all the publicly available functions and their expected arguments
   179	--              and their expected output type
   180	
   181	CREATE TABLE PLT_API (
   182	  Name VARCHAR(255) NOT NULL,
   183	  InputArgs JSON, -- e.g. '{"username":{"type": "string", "optional": false}, "active":{"type":"string", "default":1}}
   184	  OutputType JSON,
   185	  PRIMARY KEY (Name)
   186	   
   187	);
   188	
   189	
   190	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/01_tables/52_Javascript.sql"; ?>
   191	-- Platform Graphical User Interface (GUI) Javascript Functions
   192	-- Description: Lists all the global javascript functions available at the browser programming environment
   193	--              (1) The Code includes is ONLY the javascript code inside the function, not the wrapper "function xxx (...) { ... }"
   194	
   195	CREATE TABLE PLT_GUI_Javascript (
   196	 _id 			        int(11) NOT NULL AUTO_INCREMENT,
   197	 lastUpdate 	   timestamp NOT NULL DEFAULT current_timestamp(),
   198	 Namespace 		   varchar(255) DEFAULT NULL,
   199	 FuncName 		    varchar(255) NOT NULL,
   200	 InputArgs_json longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
   201	 Description 	  varchar(255) DEFAULT NULL,
   202	 Code 			       text NOT NULL,
   203	 PRIMARY KEY (_id),
   204	 UNIQUE KEY (Namespace,FuncName)
   205	);
   206	
   207	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/02_functions/ExtrairConta.sql"; ?>
   208	DROP FUNCTION IF EXISTS ExtrairConta;
   209	
   210	CREATE FUNCTION ExtrairConta (Tipo CHAR(2), Conta_Multi TEXT)
   211	RETURNS TEXT
   212	RETURN
   213	  SUBSTRING_INDEX(SUBSTRING(Conta_Multi, LOCATE(Tipo, Conta_Multi)), ":", 1);
   214	
   215	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/02_functions/FF_ProxNumSerie.sql"; ?>
   216	DROP FUNCTION IF EXISTS FF_ProxNumSerie;
   217	
   218	CREATE FUNCTION FF_ProxNumSerie (Pais TEXT, Ano TEXT) -- e.g. Pais = 'An', Ano = '20'
   219	RETURNS TEXT
   220	RETURN
   221	 CONCAT(
   222	  'FT',
   223	  Pais,
   224	  Ano,
   225	  '#',
   226	  (
   227	   SELECT MAX(SUBSTRING_INDEX(SUBSTRING_INDEX(NumSerie,".",1),"#",-1)) + 1
   228	   FROM Documentos
   229	   WHERE Tipo = 'FaturaFornecedor'
   230	    AND LEFT(NumSerie,6) = CONCAT('FT', Pais, Ano)
   231	  ),
   232	  '.pdf'
   233	 );
   234	
   235	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/02_functions/FF_ValorTotal.sql"; ?>
   236	-- Devolve o valor total da fatura (soma de todos os componentes do campo 'Valor' do campo 'Extra', e.g. ValorBaseBens + IVABens + ValorBaseServicos + IVAServicos)
   237	
   238	DROP FUNCTION IF EXISTS FF_ValorTotal;
   239	
   240	DELIMITER //
   241	
   242	CREATE FUNCTION FF_ValorTotal (Extra TEXT)
   243	RETURNS DECIMAL(18,2)
   244	BEGIN
   245	  DECLARE i INT;
   246	  DECLARE Valor DECIMAL(18,2);
   247	  SET i = 0;
   248	  SET Valor = 0;
   249	
   250	  WHILE i != JSON_LENGTH(JSON_EXTRACT (Extra, '$.Valor')) DO
   251	  
   252	    SET Valor = Valor + JSON_EXTRACT(JSON_EXTRACT(Extra, '$.Valor'), CONCAT("$.", JSON_EXTRACT(JSON_KEYS(JSON_EXTRACT(Extra, '$.Valor')), CONCAT("$[", i, "]"))));
   253		
   254		SET i = i + 1;
   255	
   256	  END WHILE;
   257	  
   258	  RETURN Valor;
   259	
   260	END;
   261	
   262	//
   263	  
   264	DELIMITER ;
   265	
   266	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/03_views/VIW_FF_PorClassificarAnalitica.sql"; ?>
   267	-- View: VIW_FF_PorClassificarAnalitica
   268	-- Descrição: Lista as faturas de fornecedores no estado 'PorClassificarAnalitica'
   269	-- Depende de: tabelas 'Documentos', 'Lancamentos' e 'Contas'
   270	
   271	DROP VIEW IF EXISTS VIW_FF_PorClassificarAnalitica;
   272	
   273	CREATE VIEW VIW_FF_PorClassificarAnalitica AS
   274	SELECT
   275		a.FileId,
   276		a.NumSerie,
   277		CONVERT(JSON_EXTRACT(a.Extra, '$.DataFatura'), DATE) AS DataFatura,
   278		c.Nome AS FornecedorNome,
   279		JSON_EXTRACT(c.Extra, '$.FornecedorNIF') AS FornecedorNIF,
   280		JSON_EXTRACT(a.Extra, '$.NumFatura') AS NumFatura,
   281		JSON_EXTRACT(a.Extra, '$.Moeda') AS Moeda,
   282		FF_ValorTotal(a.Extra) AS Valor
   283	FROM Documentos AS a
   284	INNER JOIN Lancamentos AS b ON a.NumSerie = b.DocNumSerie
   285	INNER JOIN Contas AS c ON b.Conta = c.Conta
   286	WHERE a.Tipo = 'FaturaFornecedor'
   287		AND LEFT(c.Conta,2) = 'FO'
   288		AND a.Estado = 'PorClassificarAnalitica'
   289	;
   290	
   291	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/03_views/VIW_FF_Todas.sql"; ?>
   292	-- View: VIW_FF_Todas
   293	-- Descrição: Lista todas as faturas de fornecedores, independentemente do seu estado
   294	-- Depende de: tabelas 'Documentos', 'Lancamentos' e 'Contas'
   295	
   296	DROP VIEW IF EXISTS VIW_FF_Todas;
   297	
   298	CREATE VIEW VIW_FF_Todas AS
   299	SELECT
   300		a.FileId,
   301		a.NumSerie,
   302		CONVERT(JSON_EXTRACT (a.Extra, '$.DataFatura'), DATE) AS DataFatura,
   303		JSON_EXTRACT (a.Extra, '$.NumFatura') AS NumFatura,
   304		c.Nome AS FornecedorNome,
   305		JSON_EXTRACT (c.Extra, '$.FornecedorNIF') AS FornecedorNIF,
   306		FF_ValorTotal(a.Extra) AS Valor,
   307		JSON_EXTRACT (a.Extra, '$.Moeda') AS Moeda,
   308		JSON_EXTRACT (a.Extra, '$.Projeto') AS Projeto,
   309		a.Estado
   310	FROM Documentos AS a
   311	INNER JOIN Lancamentos AS b ON a.NumSerie = b.DocNumSerie
   312	INNER JOIN Contas AS c      ON b.Conta = c.Conta
   313	WHERE a.Tipo = 'FaturaFornecedor'
   314		AND LEFT(c.Conta,2) = 'FO'
   315	;
   316	
   317	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/03_views/VIW_Fornecedores.sql"; ?>
   318	-- View: VIW_Fornecedores
   319	-- Descrição: Lista todos os fornecedores
   320	-- Depende de: tabela 'Contas'
   321	
   322	DROP VIEW IF EXISTS VIW_Fornecedores;
   323	
   324	CREATE VIEW VIW_Fornecedores AS
   325	SELECT
   326		Conta AS Codigo,
   327		Nome,
   328		JSON_EXTRACT (Extra, '$.NomeCurto') AS NomeCurto,
   329		JSON_EXTRACT (Extra, '$.NIF') AS NIF
   330	FROM Contas
   331	WHERE LEFT(Conta,2) = 'FO'
   332	;
   333	
   334	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/03_views/VIW_Projetos.sql"; ?>
   335	-- View: VIW_Projetos
   336	-- Descrição: Lista todos os projetos (primeiro nível dos centros de resultados)
   337	-- Depende de: tabela 'Contas'
   338	
   339	DROP VIEW IF EXISTS VIW_Projetos;
   340	
   341	CREATE VIEW VIW_Projetos AS
   342	SELECT
   343	  Conta,
   344	  Nome
   345	FROM Contas
   346	WHERE LEFT(Conta,2) = 'CR' AND LENGTH(Conta) = 4
   347	;
   348	
   349	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/04_storedProcedures/00_GerarLancamentos.sql"; ?>
   350	DROP PROCEDURE IF EXISTS GerarLancamentos;
   351	
   352	DELIMITER //
   353	
   354	-- Descrição: separa lancamentos por meses. Função de suporte para outros stored procedures poderem fazer lancamentos.
   355	--
   356	
   357	CREATE PROCEDURE GerarLancamentos (
   358	  Conta TEXT,
   359	  CoefRateio FLOAT,
   360	  Periodo TEXT, -- e.g. {"Inicio": "2011-11-25", "Fim": "2011-11-25"}
   361	  DocNumSerie TEXT
   362	  )
   363	  BEGIN
   364	    DECLARE d DATE;
   365	    DECLARE n INT;
   366	    SET d = LAST_DAY(JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Inicio'))) + INTERVAL 1 DAY - INTERVAL 1 MONTH;
   367	    -- d: primeiro dia do mês em que se inicia o período
   368	    SET n = MONTH(JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Fim'))) - MONTH(JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Inicio'))) + 1;
   369	    -- n: número de meses abrangidos pelo período
   370	    
   371	    START TRANSACTION;
   372	    
   373	    WHILE d <= JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Fim')) DO
   374	    
   375	      -- a) Caso em que o período é composto apenas por meses completos:
   376	      IF (
   377	        DAY(JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Inicio'))) = 1 AND
   378	        JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Fim')) = LAST_DAY(JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Fim')))
   379	        ) THEN
   380	          INSERT INTO Lancamentos (Conta, CoefRateio, Mes, DocNumSerie)
   381	          VALUES (Conta, CoefRateio / n, d, DocNumSerie);
   382	      -- b) Caso em que o período começa e/ou acaba a meio de um mês:
   383	      ELSE
   384	        INSERT INTO Lancamentos (Conta, CoefRateio, Mes, DocNumSerie)
   385	        VALUES (
   386	          Conta,
   387	          CoefRateio * (
   388	            (DATEDIFF(LEAST(LAST_DAY(d), JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Fim'))), GREATEST(d, JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Inicio')))) + 1) /
   389	            (DATEDIFF(JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Fim')), JSON_UNQUOTE(JSON_EXTRACT(Periodo, '$.Inicio'))) + 1)
   390	            ),
   391	          d,
   392	          DocNumSerie
   393	        );
   394	      END IF;
   395	    
   396	      SET d = d + INTERVAL 1 MONTH;
   397	      
   398	    END WHILE;
   399	    
   400	    COMMIT;
   401	  
   402	  END;
   403	//
   404	
   405	DELIMITER ;
   406	
   407	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/04_storedProcedures/01_FF_NovaFatura.sql"; ?>
   408	DROP PROCEDURE IF EXISTS FF_NovaFatura;
   409	
   410	DELIMITER //
   411	
   412	-- Descrição: transforma um ficheiro no disco numa fatura de fornecedor por classificar
   413	--
   414	--        será chamada pelo sistema quando:
   415	--         (1) recebe um email com anexo PDF
   416	--         (2) ficheiro Dropbox
   417	--
   418	
   419	CREATE PROCEDURE FF_NovaFatura (IN FileId TEXT )
   420	 BEGIN
   421	 
   422	  -- 0. Verificar validade dos argumentos
   423	  IF NOT EXISTS (SELECT Id FROM SYS_Files WHERE Id = FileId)
   424	   THEN signal sqlstate '23000' set message_text = 'FileId inexistente.';
   425	  END IF;
   426	   
   427	  -- 1. Começar Transacao
   428	  START TRANSACTION;
   429	  
   430	  -- 1. Inserir em Documentos 
   431	  INSERT INTO Documentos (Tipo, Estado, FileId) 
   432	  VALUES ('FaturaFornecedor', 'PorClassificarFornecedor', FileId);
   433	  
   434	  -- 10. Salvar
   435	  COMMIT;
   436	 END;
   437	//
   438	
   439	DELIMITER ;
   440	
   441	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/04_storedProcedures/02_FF_ClassificarFornecedor.sql"; ?>
   442	DROP PROCEDURE IF EXISTS FF_ClassificarFornecedor;
   443	
   444	DELIMITER //
   445	
   446	CREATE PROCEDURE FF_ClassificarFornecedor (
   447	IN NumSerie                 TEXT,
   448	IN NumFatura                TEXT,
   449	IN Projecto                 TEXT,
   450	IN DataFatura               DATE,
   451	IN DataRecebida             DATE,
   452	IN PeriodoFaturacao         TEXT,
   453	-- e.g. {"Inicio": "2011-11-25", "Fim": "2011-11-25"}
   454	IN DataValFatura            TEXT,
   455	IN FornecedorCodigo         TEXT,
   456	IN Valor                    TEXT,
   457	-- e.g. {"Bens": {"ValorBase": 0.00, "Iva": 0.00}, "Servicos": {"ValorBase":0.00,"Iva":0.00}}
   458	IN Moeda                    TEXT,
   459	IN Descricao                TEXT
   460	)
   461	 BEGIN
   462	 
   463	  -- 0. Verificar validade dos argumentos
   464	  IF NumSerie NOT IN (SELECT NumSerie FROM Documentos WHERE Estado = 'PorClassificarFornecedor')
   465	   THEN signal sqlstate '20000' set message_text = 'Fatura inexistente ou indisponível para esta ação';
   466	  END IF;
   467	   
   468	  -- 1. Começar Transacao
   469	  START TRANSACTION;
   470	  
   471	  -- 2. Alterar dados
   472	  -- 2.1 Inserir Lançamento Fornecedor
   473	  CALL GerarLancamentos (FornecedorCodigo, 1, PeriodoFaturacao, NumSerie);
   474	  
   475	  -- 2.2 Inserir Lançamento Custos Gerais
   476	  CALL GerarLancamentos ("CG01", -1, PeriodoFaturacao, NumSerie);
   477	  
   478	  -- 2.3 Acrescentar dados a documento
   479	  UPDATE Documentos
   480	   SET
   481	    Estado = 'PorClassificarAnalitica',
   482	    Extra = JSON_SET(Extra, 
   483	        '$.NumFatura', NumFatura,
   484	        '$.Projeto', Projeto,
   485	        '$.DataFatura', DataFatura,
   486	        '$.DataRecebida', DataRecebida,
   487	        '$.PeriodoFaturacao', PeriodoFaturacao,
   488	        '$.DataValFatura', DataValFatura,
   489	        '$.FornecedorCodigo', FornecedorCodigo,
   490	        '$.Valor', Valor,
   491	        '$.Moeda', Moeda,
   492	        '$.Descricao', Descricao
   493	  ) 
   494	  WHERE NumSerie = NumSerie;
   495	  
   496	  -- 10. Salvar
   497	  COMMIT;
   498	 END;
   499	//
   500	
   501	DELIMITER ;
   502	
   503	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/04_storedProcedures/03_FF_ClassificarAnalitica.sql"; ?>
   504	DROP PROCEDURE IF EXISTS FF_ClassificarAnalitica;
   505	
   506	DELIMITER //
   507	
   508	CREATE PROCEDURE FF_ClassificarAnalitica (
   509	IN NumSerie                      TEXT,
   510	IN ValorFatura                   DECIMAL(18,2),
   511	IN ClassificacaoAnalitica        TEXT
   512	-- e.g. [{"CentroResultados": "CR0101", "Analitica": "AN0202", "Colaborador": "COabc", "Valor": 1000}, {...}]
   513	)
   514	 BEGIN
   515	  DECLARE i INT;
   516	  SET i = 0;
   517	 
   518	  -- 0. Verificar validade dos argumentos
   519	  IF NumSerie NOT IN (SELECT NumSerie FROM Documentos WHERE Estado = 'PorClassificarAnalitica')
   520	   THEN signal sqlstate '20000' set message_text = 'Fatura inexistente ou indisponível para esta ação';
   521	  END IF;
   522	   
   523	  -- 1. Começar Transacao
   524	  START TRANSACTION;
   525	  
   526	  -- 2. Alterar dados
   527	  -- 2.1 Inserir lançamentos com analíticas discriminadas
   528	  WHILE i != JSON_LENGTH(ClassificacaoAnalitica) DO
   529	 
   530	   CALL GerarLancamentos (
   531	     CONCAT_WS(":",
   532	      JSON_EXTRACT(JSON_EXTRACT(ClassificacaoAnalitica, CONCAT("'$[", i, "]'")), '$.CentroResultados'),
   533	      JSON_EXTRACT(JSON_EXTRACT(ClassificacaoAnalitica, CONCAT("'$[", i, "]'")), '$.Analitica'),
   534	      JSON_EXTRACT(JSON_EXTRACT(ClassificacaoAnalitica, CONCAT("'$[", i, "]'")), '$.Colaborador')
   535	     ),
   536	     JSON_EXTRACT(JSON_EXTRACT(ClassificacaoAnalitica, CONCAT("'$[", i, "]'")), '$.Valor') / ValorFatura * -1,
   537	     JSON_EXTRACT((SELECT Extra FROM Documentos WHERE NumSerie = NumSerie), '$.PeriodoFaturacao'),
   538	     NumSerie
   539	    );
   540	
   541	   SET i = i + 1;
   542	   
   543	  END WHILE;
   544	
   545	  -- 2.2 Inserir lançamento em custos gerais (com sinal contrário ao que foi lançado ao classificar o fornecedor)
   546	   CALL GerarLancamentos ("CG01", 1, JSON_EXTRACT((SELECT Extra FROM Documentos WHERE NumSerie = NumSerie), '$.PeriodoFaturacao'), NumSerie);
   547	
   548	  -- 2.3 Alterar estado do documento
   549	   UPDATE Documentos
   550	   SET Estado = 'PorAnexarCPagamento';
   551	                  
   552	  -- 10. Salvar
   553	  COMMIT;
   554	 END;
   555	//
   556	
   557	DELIMITER ;
   558	
   559	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/04_storedProcedures/FF_PorAnexarCPagamento_UPDATE.sql"; ?>
   560	DROP PROCEDURE IF EXISTS FF_PorAnexarCPagamento_UPDATE;
   561	
   562	DELIMITER //
   563	
   564	CREATE PROCEDURE FF_PorAnexarCPagamento_UPDATE (
   565	IN NumSerie                 TEXT,
   566	IN FileId                   TEXT,
   567	IN NumFatura                TEXT,
   568	IN DataFatura               DATE,
   569	IN DataRecebida             DATE,
   570	IN PeriodoFaturacao         TEXT,
   571	-- e.g. {"Inicio": "2011-11-25", "Fim": "2011-11-25"}
   572	IN DataValFatura            TEXT,
   573	IN FornecedorCodigo         TEXT,
   574	IN Valor                    TEXT,
   575	-- e.g. {"Bens": {"ValorBase": 0.00, "Iva": 0.00}, "Servicos": {"ValorBase":0.00,"Iva":0.00}}
   576	IN Moeda                    TEXT,
   577	IN Descricao                TEXT,
   578	IN ValorFatura              DECIMAL(18,2),
   579	IN ClassificacaoAnalitica   TEXT
   580	-- e.g. [{"CentroResultados": "CR0101", "Analitica": "AN0202", "Colaborador": "COabc", "Valor": 1000}, {...}]
   581	)
   582	 BEGIN
   583	  DECLARE i INT;
   584	  SET i = 0;
   585	 
   586	  -- 0. Verificar validade dos argumentos
   587	  IF NumSerie NOT IN (SELECT NumSerie FROM Documentos WHERE Estado = 'PorAnexarCPagamento')
   588	   THEN signal sqlstate '20000' set message_text = 'Fatura inexistente ou indisponível para esta ação';
   589	  END IF;
   590	   
   591	  -- 1. Começar Transacao
   592	  START TRANSACTION;
   593	  
   594	  -- 2. Alterar dados
   595	  -- 2.1 Apagar lançamentos
   596	  DELETE FROM Lancamentos
   597	  WHERE NumSerie = NumSerie;
   598	  
   599	  -- 2.2 Inserir novos lançamentos em fornecedor
   600	  CALL GerarLancamentos (FornecedorCodigo, 1, PeriodoFaturacao, NumSerie);
   601	  
   602	  -- 2.3 Inserir novos lançamentos em custos gerais
   603	  CALL GerarLancamentos ("CG01", -1, PeriodoFaturacao, NumSerie);
   604	  CALL GerarLancamentos ("CG01", 1, PeriodoFaturacao, NumSerie);
   605	
   606	  -- 2.4 Inserir novos lançamentos com analíticas discriminadas
   607	  WHILE i != JSON_LENGTH(ClassificacaoAnalitica) DO
   608	 
   609	   CALL GerarLancamentos (
   610	     CONCAT_WS(":",
   611	      JSON_EXTRACT(JSON_EXTRACT(ClassificacaoAnalitica, CONCAT("'$[", i, "]'")), '$.CentroResultados'),
   612	      JSON_EXTRACT(JSON_EXTRACT(ClassificacaoAnalitica, CONCAT("'$[", i, "]'")), '$.Analitica'),
   613	      JSON_EXTRACT(JSON_EXTRACT(ClassificacaoAnalitica, CONCAT("'$[", i, "]'")), '$.Colaborador')
   614	     ),
   615	     JSON_EXTRACT(JSON_EXTRACT(ClassificacaoAnalitica, CONCAT("'$[", i, "]'")), '$.Valor') / ValorFatura * -1,
   616	     PeriodoFaturacao,
   617	     NumSerie
   618	    );
   619	
   620	   SET i = i + 1;
   621	   
   622	  END WHILE;
   623	
   624	  -- 2.5 Alterar dados do documento
   625	  UPDATE Documentos
   626	   SET
   627	    FileId = FileId,
   628	    Extra = JSON_SET(Extra, 
   629	        '$.NumFatura', NumFatura,
   630	        '$.DataFatura', DataFatura,
   631	        '$.DataRecebida', DataRecebida,
   632	        '$.PeriodoFaturacao', PeriodoFaturacao,
   633	        '$.DataValFatura', DataValFatura,
   634	        '$.FornecedorCodigo', FornecedorCodigo,
   635	        '$.Valor', Valor,
   636	        '$.Moeda', Moeda,
   637	        '$.Descricao', Descricao
   638	  ) 
   639	  WHERE NumSerie = NumSerie;
   640	  
   641	  -- 10. Salvar
   642	  COMMIT;
   643	 END;
   644	//
   645	
   646	DELIMITER ;
   647	
   648	<?php $outerScopeCompleteFilePath = "./01_sql/03_app/04_storedProcedures/FF_PorClassificarAnalitica_UPDATE.sql"; ?>
   649	DROP PROCEDURE IF EXISTS FF_PorClassificarAnalitica_UPDATE;
   650	
   651	DELIMITER //
   652	
   653	CREATE PROCEDURE FF_PorClassificarAnalitica_UPDATE (
   654	IN NumSerie                 TEXT,
   655	IN FileId                   TEXT,
   656	IN NumFatura                TEXT,
   657	IN Projecto                 TEXT,
   658	IN DataFatura               DATE,
   659	IN DataRecebida             DATE,
   660	IN PeriodoFaturacao         TEXT,
   661	-- e.g. {"Inicio": "2011-11-25", "Fim": "2011-11-25"}
   662	IN DataValFatura            TEXT,
   663	IN FornecedorCodigo         TEXT,
   664	IN Valor                    TEXT,
   665	-- e.g. {"Bens": {"ValorBase": 0.00, "Iva": 0.00}, "Servicos": {"ValorBase":0.00,"Iva":0.00}}
   666	IN Moeda                    TEXT,
   667	IN Descricao                TEXT
   668	)
   669	 BEGIN
   670	 
   671	  -- 0. Verificar validade dos argumentos
   672	  IF NumSerie NOT IN (SELECT NumSerie FROM Documentos WHERE Estado = 'PorClassificarAnalitica')
   673	   THEN signal sqlstate '20000' set message_text = 'Fatura inexistente ou indisponível para esta ação';
   674	  END IF;
   675	   
   676	  -- 1. Começar Transacao
   677	  START TRANSACTION;
   678	  
   679	  -- 2. Alterar dados
   680	  
   681	  -- 2.1 Apagar lançamentos
   682	  DELETE FROM Lancamentos
   683	  WHERE NumSerie = NumSerie;
   684	  
   685	  -- 2.2 Inserir novos lançamentos em fornecedor
   686	  CALL GerarLancamentos (FornecedorCodigo, 1, PeriodoFaturacao, NumSerie);
   687	  
   688	  -- 2.3 Inserir novos lançamentos em custos gerais
   689	  CALL GerarLancamentos ("CG01", -1, PeriodoFaturacao, NumSerie);
   690	  
   691	  -- 2.4 Alterar dados do documento
   692	  UPDATE Documentos
   693	   SET
   694	    FileId = FileId,
   695	    Extra = JSON_SET(Extra, 
   696	        '$.NumFatura', NumFatura,
   697	        '$.Projeto', Projeto,
   698	        '$.DataFatura', DataFatura,
   699	        '$.DataRecebida', DataRecebida,
   700	        '$.PeriodoFaturacao', PeriodoFaturacao,
   701	        '$.DataValFatura', DataValFatura,
   702	        '$.FornecedorCodigo', FornecedorCodigo,
   703	        '$.Valor', Valor,
   704	        '$.Moeda', Moeda,
   705	        '$.Descricao', Descricao
   706	  ) 
   707	  WHERE NumSerie = NumSerie;
   708	  
   709	  -- 10. Salvar
   710	  COMMIT;
   711	 END;
   712	//
   713	
   714	DELIMITER ;
   715	
   716	<?php $outerScopeCompleteFilePath = "./02_gui/gui_js_funcs.dml.sql"; ?>
   717	
   718	INSERT INTO PLT_GUI_Javascript (FuncName,InputArgs_json,Description,Code) VALUES ("RootController",0x7b2273696d706c65537472696e6731223a22737472696e673f222c2273696d706c65537472696e6732223a22737472696e673f227d,"this is the main controller of the application",0x2f2f20404465736372697074696f6e3a207468697320697320746865206d61696e20636f6e74726f6c6c6572206f6620746865206170706c69636174696f6e0a2f2f2040706172616d2073696d706c65537472696e673120737472696e673f2074686973206120612073696d706c65207465737420737472696e67206f6e650a2f2f2040706172616d2073696d706c65537472696e673220737472696e673f2074686973206120612073696d706c65207465737420737472696e672074776f0a2f2f204072657475726e20737472696e670a2f2f2066756e6374696f6e20526f6f74436f6e74726f6c6c65722829207b0a72657475726e207b0a092272656e646572444f4d223a2066756e6374696f6e2829207b200a090976617220656c203d20646f63756d656e742e637265617465456c656d656e7428227370616e22293b200a0909656c2e696e6e657254657874203d202248656c6c6f2120546865205c226c617374206275696c642064617368626f6172645c22206d6f76656420746f202f6c6173745f6275696c642e70687020223b200a090972657475726e20656c3b200a097d0a7d0a2f2f207d0a);
   719	
